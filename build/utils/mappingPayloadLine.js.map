{"version":3,"file":"mappingPayloadLine.js","sourceRoot":"","sources":["../../src/utils/mappingPayloadLine.ts"],"names":[],"mappings":";;;;;;AAAA,gEAAsC;AAGtC,MAAa,kBAAkB;IAI7B,YAAY,KAAkB,EAAE,EAAkB;QAChD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,EAAE,GAAG,sBAAW,CAAC,KAAK,CAAC,EAAI,CAAC,CAAC,MAAgB,CAAA;IACpD,CAAC;IAEO,OAAO,CAAC,QAAyB;QACvC,IAAI,CAAC,QAAQ;YAAE,OAAO,IAAI,CAAA;QAC1B,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO,IAAI,CAAA;QACrC,MAAM,QAAQ,GAAa,EAAE,CAAA;QAC7B,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;YAC3B,QAAQ,IAAI,CAAC,IAAI,EAAE;gBACjB,KAAK,MAAM;oBACT,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC3D,MAAM,IAAI,GAAuB;4BAC/B,IAAI,EAAE,UAAU;4BAChB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAS;4BAC/B,QAAQ,EAAE;gCACR,IAAI,EAAE,SAAS;gCACf,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,OAAS;gCAC5B,OAAO,EAAE,EAAE;6BACZ;yBACF,CAAA;wBACD,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,OAAS,EAAE;4BAC3C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;gCACzB,IAAI,EAAE,UAAU;gCAChB,KAAK,EAAE,MAAM,CAAC,IAAI;gCAClB,WAAW,EAAE,MAAM,CAAC,IAAI;gCACxB,IAAI,EAAE,UAAU,MAAM,CAAC,QAAQ,CAAC,EAAE;6BACnC,CAAC,CAAA;yBACH;wBACD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;qBAEpB;yBAAM;wBACL,QAAQ,CAAC,IAAI,CAAC;4BACZ,IAAI,EAAE,IAAI,CAAC,IAAI;4BACf,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;yBAC3B,CAAC,CAAA;qBACH;oBAED,MAAM;gBAER;oBACE,MAAM;aACT;SACF;QACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAA;QACrC,OAAO,QAAQ,CAAA;IACjB,CAAC;IAEM,SAAS;QACd,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAA;QAC1D,IAAI,CAAC,SAAS;YAAE,OAAO,IAAI,CAAA;QAE3B,MAAM,QAAQ,GAAmB,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAA0B,CAAA;QAEtE,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QAC1C,OAAO,WAAW,CAAA;IACpB,CAAC;IAEM,QAAQ;QACb,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,CAAA;QACvD,IAAI,CAAC,QAAQ;YAAE,OAAO,IAAI,CAAA;QAE1B,MAAM,QAAQ,GAAmB,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAA0B,CAAA;QAErE,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QAC1C,OAAO,WAAW,CAAA;IACpB,CAAC;CACF;AAxED,gDAwEC","sourcesContent":["import queryString from 'query-string'\nimport { Flow, Element, TemplateTextButton} from '../type/index'\n\nexport class mappingPayloadLine {\n  private flows: Array<Flow>\n  private id?: string | null\n\n  constructor(flows: Array<Flow>, id?: string | null) {\n    this.flows = flows\n    this.id = queryString.parse(id!!).action as string\n  }\n\n  private mapping(elements?: Array<Element>) {\n    if (!elements) return null\n    if (elements.length <= 0) return null\n    const arrayMap: object[] = []\n    for (const data of elements) {\n      switch (data.type) {\n        case 'text':\n          if (data.options.buttons && data.options.buttons.length > 0) {\n            const temp: TemplateTextButton = {\n              type: 'template',\n              altText: data.options.message!!,\n              template: {\n                type: 'buttons',\n                text: data.options.message!!,\n                actions: []\n              }\n            }\n            for (const button of data.options.buttons!!) {\n              temp.template.actions.push({\n                type: 'postback',\n                label: button.text,\n                displayText: button.text,\n                data: `action=${button['sub-id']}`\n              })\n            }\n            arrayMap.push(temp)\n            \n          } else {\n            arrayMap.push({\n              type: data.type,\n              text: data.options.message\n            })\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n    console.log(JSON.stringify(arrayMap))\n    return arrayMap\n  }\n\n  public findStart(): any {\n    const flowStart = this.flows.find(f => f.type === 'start')\n    if (!flowStart) return null\n\n    const elements: Array<Element> = flowStart?.elements as Array<Element>\n\n    const mappingLine = this.mapping(elements)\n    return mappingLine\n  }\n\n  public findNext(): any {\n    const flowNext = this.flows.find(f => f.id === this.id)\n    if (!flowNext) return null\n\n    const elements: Array<Element> = flowNext?.elements as Array<Element>\n\n    const mappingLine = this.mapping(elements)\n    return mappingLine\n  }\n}"]}