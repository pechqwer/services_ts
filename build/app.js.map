{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,yBAAsB;AACtB,sDAA+E;AAC/E,qCAAkC;AAClC,8CAAkD;AAClD,4BAAyB;AAEzB,MAAM,MAAM;IAIV,YAAY,IAAY;QACtB,IAAI,CAAC,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAA;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAEhB,IAAI,CAAC,MAAM,EAAE,CAAA;QACb,IAAI,CAAC,GAAG,EAAE,CAAA;IAEZ,CAAC;IAEO,MAAM;QACZ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAA;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,UAAU,CAAC;YAC9B,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC,CAAA;QAEH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,eAAM,CAAC,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YACzE,IAAI,CAAC,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,eAAK,CAAC,CAAC;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAQ,CAAC,CAAC;IACzB,CAAC;IAEO,GAAG;QACT,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAS,EAAE;YACpC,OAAO,CAAC,GAAG,CACT,qCAAqC,IAAI,CAAC,IAAI,EAAE,CACjD,CAAC;QACJ,CAAC,CAAA,CAAC,CAAA;IACJ,CAAC;CAEF;AAED,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;AAEpC,gCAAgC;AAEhC,qCAAqC;AAErC,0BAA0B;AAC1B,+BAA+B;AAC/B,mBAAmB;AACnB,MAAM;AAEN,8BAA8B;AAE9B,2EAA2E;AAC3E,0CAA0C;AAC1C,KAAK;AAEL,kBAAkB;AAClB,qBAAqB;AAErB,iCAAiC;AACjC,iBAAiB;AACjB,kDAAkD;AAClD,OAAO;AACP,KAAK","sourcesContent":["import 'dotenv/config'\nimport express, { Application, Request, Response, NextFunction } from 'express'\nimport { routes } from './routes';\nimport { error, notFound } from './config/express'\nimport './config/req_api'\n\nclass Server {\n  private app: Application\n  private port: number\n\n  constructor(port: number) {\n    this.app = express()\n    this.port = port\n\n    this.config()\n    this.run()\n\n  }\n\n  private config(): void {\n    this.app.use(express.json())\n    this.app.use(express.urlencoded({\n      extended: true\n    }))\n\n    this.app.use('/api/v1', routes);\n    this.app.get('/error', (req: Request, res: Response, next: NextFunction) => {\n      next(new Error('A contrived error'));\n    })\n\n    this.app.use(error);\n    this.app.use(notFound);\n  }\n\n  private run(): void {\n    this.app.listen(this.port, async () => {\n      console.log(\n        `server running : http://localhost:${this.port}`\n      );\n    })\n  }\n\n}\n\nnew Server(Number(process.env.port))\n\n// const port = process.env.port\n\n// const app: Application = express()\n\n// app.use(express.json())\n// app.use(express.urlencoded({\n//   extended: true\n// }))\n\n// app.use('/api/v1', routes);\n\n// app.get('/error', (req: Request, res: Response, next: NextFunction) => {\n//   next(new Error('A contrived error'));\n// })\n\n// app.use(error);\n// app.use(notFound);\n\n// app.listen(port, async () => {\n//   console.log(\n//     `server running : http://localhost:${port}`\n//   );\n// })\n"]}